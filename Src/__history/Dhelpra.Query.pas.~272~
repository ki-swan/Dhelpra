unit Dhelpra.Query;

interface

uses
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, 
  System.JSON, Dhelpra.Connection, Dhelpra.Interfaces,
  Dhelpra.Entity.Interfaces;

type

TDhelpraQuery = class(TInterfacedObject, iDhelpraQuery)
private
  FQuery : TFDQuery;
public
  constructor Create(aConnection : TFDConnection); reintroduce; overload;
  constructor Create(aConnection : iDhelpraConnection); reintroduce; overload;
  constructor Create; reintroduce; overload;
  destructor Destroy; override;
  Class function New(aConnection : TFDConnection) : iDhelpraQuery; overload;
  Class function New(aConnection : iDhelpraConnection) : iDhelpraQuery; overload;
  Class function New : iDhelpraQuery; overload;
  
  function AssignConnection(aConnection: TFDConnection) : iDhelpraQuery; overload;
  function AssignConnection(aConnection: iDhelpraConnection) : iDhelpraQuery; overload;
  function Connection : TFDCustomConnection;
  
  function ExecSQL(aSQL : string) : Integer; overload;    
  procedure ExecSQL; overload;
  function Open(aSQL : String) : iDhelpraQuery; overload;
  function Open : iDhelpraQuery; overload;
  function Query : TFDQuery;
  function SQL(aSQL : String) : iDhelpraQuery;
  function Param(aParamName : String; aParamValue : Variant) : iDhelpraQuery;

  function QueryToJSON : TJSONArray;
  function QueryToEntity : iDhelpraTable;
end;

implementation

uses
  System.SysUtils, System.Variants, System.Classes, Dhelpra.Table, Dhelpra.Entity, Dhelpra.Field;

{ TDhelpraQuery }

constructor TDhelpraQuery.Create(aConnection: TFDConnection);
begin
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := aConnection;
  FQuery.Connection.Connected := True;
end;

constructor TDhelpraQuery.Create(aConnection: iDhelpraConnection);
begin
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := aConnection.Connection;
  FQuery.Connection.Connected := True;
end;

constructor TDhelpraQuery.Create;
begin

end;

destructor TDhelpraQuery.Destroy;
begin
  FreeAndNil(FQuery);
  inherited;
end;

class function TDhelpraQuery.New(aConnection: TFDConnection): iDhelpraQuery;
begin
  if not Assigned(aConnection) then raise Exception.Create('aConnection não foi criado');
  Result := TDhelpraQuery.Create(aConnection);
end;

class function TDhelpraQuery.New(aConnection: iDhelpraConnection): iDhelpraQuery;
begin
  if not Assigned(aConnection) then raise Exception.Create('aConnection não foi criado');
  Result := TDhelpraQuery.Create(aConnection);
end;

class function TDhelpraQuery.New: iDhelpraQuery;
begin
  Result := TDhelpraQuery.Create;
end;

function TDhelpraQuery.AssignConnection(aConnection: iDhelpraConnection): iDhelpraQuery;
begin
  Result := Self;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := aConnection.Connection;
  FQuery.Connection.Connected := True;
end;

function TDhelpraQuery.AssignConnection(aConnection: TFDConnection): iDhelpraQuery;
begin
  Result := Self;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := aConnection;
  FQuery.Connection.Connected := True;
end;

function TDhelpraQuery.Connection: TFDCustomConnection;
begin
  Result := FQuery.Connection;
end;

function TDhelpraQuery.ExecSQL(aSQL: string): Integer;
begin
  Result := FQuery.ExecSQL(aSQL);
end;

procedure TDhelpraQuery.ExecSQL;
begin
  FQuery.ExecSQL;
end;

function TDhelpraQuery.Open(aSQL: String): iDhelpraQuery;
begin
  Result := Self;
  FQuery.Open(aSQL);
end;

function TDhelpraQuery.Open: iDhelpraQuery;
begin
  Result := Self;
  FQuery.Open;
end;
      
function TDhelpraQuery.Param(aParamName: String; aParamValue: Variant): iDhelpraQuery;
begin         
  Result := Self;
  FQuery.ParamByName(aParamName).Value := aParamValue;
end;

function TDhelpraQuery.SQL(aSQL: String): iDhelpraQuery;
begin
  Result := Self;
  FQuery.SQL.Text := aSQL;
end;

function TDhelpraQuery.Query: TFDQuery;
begin
  Result := FQuery;
end;

function TDhelpraQuery.QueryToEntity: iDhelpraTable;
var
  i : Integer;
  lFieldName : String;
begin
  Result := TDhelpraTable.New;
  if FQuery.Exists or (not (FQuery.FieldCount = 0)) then
  begin
    FQuery.First;
    while not FQuery.Eof do
    begin
      var lEntity := TDhelpraEntity.New;
      for i := 0 to Pred(FQuery.Fields.Count) do
      begin
        lFieldName := FQuery.Fields.Fields[i].FieldName;
        case FQuery.Fields.FieldByName(lFieldName).DataType of
          ftSmallint, ftShortint, ftInteger:
            lEntity.add(TDhelpraField.New.name(lFieldName.ToLower)
                   .value(FQuery.FieldByName(lFieldName).AsInteger)
                   .data_type(ftInteger));

          ftString, ftLongWord, ftWord, ftBlob, ftMemo, ftWideString, ftWideMemo : lEntity.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsString);
          ftBoolean : lEntity.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsBoolean);
          ftFloat : lEntity.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsFloat);
          ftCurrency: lEntity.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsCurrency);
          ftSingle: lEntity.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsSingle);
//          else
//            lEntity.AddPair(lFieldName.ToLower, Ord(FQuery.Fields.FieldByName(lFieldName).DataType));
        end;
      end;
      Result.Add(lEntity);
      FQuery.Next;
    end;
  end;
end;

function TDhelpraQuery.QueryToJSON: TJSONArray;
var
  i : Integer;
  lFieldName : String;
begin
  Result := TJSONArray.Create;
  if FQuery.Exists or (not (FQuery.FieldCount = 0)) then
  begin
    FQuery.First;           
    while not FQuery.Eof do
    begin
      var lJSON := TJSONObject.Create;
      for i := 0 to Pred(FQuery.Fields.Count) do  
      begin
        lFieldName := FQuery.Fields.Fields[i].FieldName;
        case FQuery.Fields.FieldByName(lFieldName).DataType of
          ftSmallint, ftShortint, ftInteger: lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsInteger);
          ftString, ftLongWord, ftWord, ftBlob, ftMemo, ftWideString, ftWideMemo : lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsString);
          ftBoolean : lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsBoolean);
          ftFloat : lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsFloat);
          ftCurrency: lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsCurrency);
          ftSingle: lJSON.AddPair(lFieldName.ToLower, FQuery.FieldByName(lFieldName).AsSingle);
//          else
//            lJSON.AddPair(lFieldName.ToLower, Ord(FQuery.Fields.FieldByName(lFieldName).DataType));
        end;
      end;
      Result.Add(lJSON);
      FQuery.Next;
    end;
  end;
end;

end.
