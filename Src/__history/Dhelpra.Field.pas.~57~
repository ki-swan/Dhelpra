unit Dhelpra.Field;

interface

uses
  Dhelpra.Interfaces, Data.DB, System.JSON;

type

TDhelpraField = class(TInterfacedObject, iDhelpraField)
private
  [weak]
  FParent : iDhelpraEntity;

  Fname : String;
  Fjson_name : String;
  Fvalue : Variant;
  Fdata_type : TFieldType;
  Frequired : Boolean;
  function validJSONPair(aJSONObject : TJSONObject) : Boolean;
public
  constructor Create(aParent : iDhelpraEntity); reintroduce;
  destructor Destroy; override;
  class function New(aParent : iDhelpraEntity) : iDhelpraField;

  function name : String; overload;
  function name(aValue : String) : iDhelpraField; overload;
  function json_name : String; overload;
  function json_name(aValue : String) : iDhelpraField; overload;
  function value : Variant; overload;
  function value(aValue : Variant) : iDhelpraField; overload;
  function data_type : TFieldType; overload;
  function data_type(AValue : TFieldType) : iDhelpraField; overload;
  function required : Boolean; overload;
  function required(AValue : Boolean) : iDhelpraField; overload;
  function clear : iDhelpraEntity;

  function toJSON(aJSONObject : TJSONObject) : iDhelpraField;
  function fromJSON(aJSONObject : TJSONObject) : iDhelpraField;
end;

implementation

uses
  System.SysUtils,
  System.Variants;

{ TDhelpraField }

constructor TDhelpraField.Create(aParent : iDhelpraEntity);
begin
  FParent := aParent;
end;

destructor TDhelpraField.Destroy;
begin

  inherited;
end;

class function TDhelpraField.New(aParent : iDhelpraEntity) : iDhelpraField;
begin
  Result := TDhelpraField.Create(aParent);
end;

function TDhelpraField.data_type(AValue: TFieldType): iDhelpraField;
begin
  Result := Self;
  if AValue = ftUnknown then raise Exception.Create('Tipo de dado não informado');
  Fdata_type := AValue;
end;

function TDhelpraField.data_type: TFieldType;
begin
  Result := Fdata_type;
  if Result = ftUnknown then raise Exception.Create('Tipo de dado não informado');
end;

function TDhelpraField.json_name(aValue: String): iDhelpraField;
begin
  Result := Self;
  if aValue = EmptyStr then raise Exception.Create('Nome da chave JSON não foi informado');
  Fjson_name := aValue;
end;

function TDhelpraField.json_name: String;
begin
  Result := Fjson_name;
  if Result = EmptyStr then raise Exception.Create('Nome da chave JSON não foi informado');
end;

function TDhelpraField.name: String;
begin
  Result := Fname;
  if Result = EmptyStr then raise Exception.Create('Nome não foi informado');
end;

function TDhelpraField.name(aValue: String): iDhelpraField;
begin
  Result := Self;
  if aValue = EmptyStr then raise Exception.Create('Nome não foi informado');
  Fname := aValue;
end;

function TDhelpraField.required(AValue: Boolean): iDhelpraField;
begin
  Result := Self;
  Frequired := AValue;
end;

function TDhelpraField.required: Boolean;
begin
  Result := Frequired;
end;

function TDhelpraField.value: Variant;
begin
  Result := Fvalue;
end;

function TDhelpraField.value(aValue: Variant): iDhelpraField;
begin
  Result := Self;
  Fvalue := aValue;
end;

function TDhelpraField.validJSONPair(aJSONObject: TJSONObject): Boolean;
begin
  Result := False;
//  if not Fjson_transfer then exit;

  if not Assigned(aJSONObject) then raise Exception.Create('Objeto JSON não informado!');
  Result := True;
end;

function TDhelpraField.clear: iDhelpraEntity;
begin
  Result := Fparent;
  Fvalue := Null;
//  if Assigned(Fvalue_stream) then FreeAndNil(Fvalue_stream);
end;

function TDhelpraField.toJSON(aJSONObject : TJSONObject) : iDhelpraField;
begin
  Result := Self;

  validJSONPair(aJSONObject);

  if (VarIsNull(Fvalue)) and (not (Fdata_type in [ftBlob])) then
  begin
    aJSONObject.AddPair(json_name, TJSONNull.Create);
    exit;
  end;

  case Fdata_type of
    ftUnknown: raise Exception.Create('Tipo de dado não informado');
    ftString: aJSONObject.AddPair(json_name, VarToStr(value));
    ftSmallint, ftInteger, ftLargeint, ftShortint :
    begin
      if VarIsStr(Fvalue) then
        begin
          if value = '' then
            aJSONObject.AddPair(json_name, TJSONNull.Create)
          else
            aJSONObject.AddPair(json_name, TJSONNumber.Create(VarToStr(value)));
          exit;
        end;
      var asInt : Integer := value;
      aJSONObject.AddPair(json_name, TJSONNumber.Create(asInt));
    end;
    ftBoolean: aJSONObject.AddPair(json_name, TJSONBool.Create(value));
    ftWord, ftCurrency, ftFloat, ftBCD, ftSingle, ftFMTBcd, ftLongWord :
    begin
      if VarIsStr(Fvalue) then
        begin
          if value = '' then
            aJSONObject.AddPair(json_name, TJSONNull.Create)
          else
            aJSONObject.AddPair(json_name, TJSONNumber.Create(VarToStr(value)));
          exit;
        end;
      var asFloat : Double := value;
      aJSONObject.AddPair(json_name, TJSONNumber.Create(asFloat));
    end;
    ftDate : aJSONObject.AddPair(json_name, FormatDateTime('dd/mm/yyyy', value));
    ftTime : aJSONObject.AddPair(json_name, FormatDateTime('hh:mm:ss', value));
    ftDateTime, ftTimeStamp: aJSONObject.AddPair(json_name, FormatDateTime('dd/mm/yyyy', VarToDateTime(value)) + 'T' + FormatDateTime('hh:mm:ss', VarToDateTime(value)));
    else raise Exception.Create('tipo de Field não suportado');
  end;
end;

function TDhelpraField.fromJSON(aJSONObject : TJSONObject) : iDhelpraField;
begin
  Result := Self;
  if not Fjson_transfer then exit;
  validJSONPair(aJSONObject);

end;

end.
